#pragma config(Sensor, S2,     gyroSensor,     sensorEV3_Gyro)
#pragma config(Sensor, S3,     colorSensor,    sensorEV3_Color, modeEV3Color_Color)
#pragma config(Sensor, S4,     sonarSensor,    sensorEV3_Ultrasonic)
#pragma config(Motor,  motorA,          armMotor,      tmotorEV3_Large, PIDControl, encoder)
#pragma config(Motor,  motorB,          leftMotor,     tmotorEV3_Large, PIDControl, driveLeft, encoder)
#pragma config(Motor,  motorC,          rightMotor,    tmotorEV3_Large, PIDControl, driveRight, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

int get_distance(int distance);
void drive(int distance, int speed);
void Angle_rotation();


task main()
{
	int dist = 0;
	
	
	displayCenteredBigTextLine(4, "distance = %d", get_distance(dist));
	displayCenteredBigTextLine(4, "distance = %d", get_distance(dist));
	displayCenteredBigTextLine(4, "distance = %d", get_distance(dist));
	displayCenteredBigTextLine(4, "distance = %d", get_distance(dist));
	
}



int get_distance(int distance)
{	

	while (getButtonPress(buttonEnter)  == 0)
	{
		
		
		if (getButtonPress(buttonUp))
		{
			distance = 80;	
			displayCenteredBigTextLine(1, "buttons up");
			drive(distance, 50);
		}
		else if (getButtonPress(buttonDown))
		{
			distance = 60;
			displayCenteredBigTextLine(1, "buttons down");
			drive(distance, 50);
		}
		else if (getButtonPress(buttonLeft))
		{
			distance = 20;
			displayCenteredBigTextLine(1, "buttons left");
			drive(distance, 50);
		}
		else if (getButtonPress(buttonRight))
		{
			distance = 40;
			displayCenteredBigTextLine(1, "buttons right");
			drive(distance, 50);
		}
	
		 
	}	 
		
	return distance;
}


void drive(int distance, int speed)
{
	float wheel_rotations= (distance/15)*360;
	
	setMotorSyncEncoder(leftMotor, rightMotor, 0,wheel_rotations, speed);
	waitUntilMotorStop(leftMotor);
	
	
	Angle_rotation();
	
			
}

void Angle_rotation()
{
	int Angle;
	
	eraseDisplay(); // Clear the display
	displayCenteredTextLine(2,"gyro resetting");
	SensorType[S2] = sensorEV3_Gyro; // set sensor to port 2
	sleep(1000);
	resetGyro(S2);
	sleep(2000);
	displayCenteredTextLine(2,"Angle =%d",getGyroDegrees(S2));
	sleep(2000);
	
	
	// Turn Robot 90 degrees around, then stop:
	eraseDisplay();
	Angle=getGyroDegrees(S2); // Get the starting angle which should be 0
	displayCenteredTextLine(2,"Angle =%d",Angle);
	
	setMotorSync(leftMotor, rightMotor, -100, 10);
	displayCenteredTextLine(4,"rotating 90");
	
	while (abs(Angle) < 90)
	{
		sleep(2);
		Angle=getGyroDegrees(S2);
		displayCenteredBigTextLine(5,"current angle %4d",Angle);
		
	}
	setMotorSync(leftMotor, rightMotor, 0, 0); // stop the motors
	sleep(2000);
	
}
	
	